To demonstrate, let's use `module list`. `module list` shows all loaded
software modules.

```
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modulefiles:
 1) gcc-libs/4.9.2     10) nano/2.4.2         19) compilers/intel/2018/update3     
 2) cmake/3.21.1       11) nedit/5.6-aug15    20) mpi/intel/2018/update3/intel     
 3) flex/2.5.39        12) dos2unix/7.3       21) default-modules/2018             
 4) git/2.32.0         13) giflib/5.1.1       22) python/3.9.10                    
 5) apr/1.7.0          14) emacs/28.1         23) openblas/0.3.7-serial/gnu-4.9.2  
 6) apr-util/1.6.1     15) tmux/3.3a          24) python3/3.9                      
 7) subversion/1.14.1  16) mrxvt/0.5.4        25) python3/recommended              
 8) screen/4.9.0       17) userscripts/1.4.0  
 9) gerun              18) rcps-core/1.0.0
```
{: .output}

```
{{ site.remote.prompt }} module load matlab
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modulefiles:
 1) gcc-libs/4.9.2     10) nano/2.4.2         19) compilers/intel/2018/update3     
 2) cmake/3.21.1       11) nedit/5.6-aug15    20) mpi/intel/2018/update3/intel     
 3) flex/2.5.39        12) dos2unix/7.3       21) default-modules/2018             
 4) git/2.32.0         13) giflib/5.1.1       22) python/3.9.10                    
 5) apr/1.7.0          14) emacs/28.1         23) openblas/0.3.7-serial/gnu-4.9.2  
 6) apr-util/1.6.1     15) tmux/3.3a          24) python3/3.9                      
 7) subversion/1.14.1  16) mrxvt/0.5.4        25) python3/recommended              
 8) screen/4.9.0       17) userscripts/1.4.0  26) xorg-utils/X11R7.7               
 9) gerun              18) rcps-core/1.0.0    27) matlab/full/r2023a/9.14
```
{: .output}

So in this case, loading the `matlab` module also loaded `xorg-utils/X11R7.7`, software
for supporting a graphic user interface. Let's try unloading the `matlab` package.

```
{{ site.remote.prompt }} module unload matlab
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modulefiles:
 1) gcc-libs/4.9.2     10) nano/2.4.2         19) compilers/intel/2018/update3     
 2) cmake/3.21.1       11) nedit/5.6-aug15    20) mpi/intel/2018/update3/intel     
 3) flex/2.5.39        12) dos2unix/7.3       21) default-modules/2018             
 4) git/2.32.0         13) giflib/5.1.1       22) python/3.9.10                    
 5) apr/1.7.0          14) emacs/28.1         23) openblas/0.3.7-serial/gnu-4.9.2  
 6) apr-util/1.6.1     15) tmux/3.3a          24) python3/3.9                      
 7) subversion/1.14.1  16) mrxvt/0.5.4        25) python3/recommended              
 8) screen/4.9.0       17) userscripts/1.4.0  
 9) gerun              18) rcps-core/1.0.0
```
{: .output}

So using `module unload` "un-loads" a module, and depending on how a site is
 configured it may also unload all of the dependencies (in our case it does
 not). If we wanted to unload everything at once, we could run `module purge`
 (unloads everything).

```
{{ site.remote.prompt }} module purge
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
No Modulefiles Currently Loaded.
```
{: .output}

Note that `module purge` is informative. It will also let us know if a default
set of "sticky" packages cannot be unloaded (and how to actually unload these
if we truly so desired).
